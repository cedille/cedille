module sigma.

data Sigma (A: ★) (B: A ➔ ★) : ★ =
  | sigma : Π a: A. Π b: B a. Sigma.

Pair : ★ ➔ ★ ➔ ★ = λ A: ★. λ B: ★. Sigma ·A ·(λ _: A. B).
pair : ∀ A : ★ . ∀ B : ★ . A ➔ B ➔ Pair · A · B = Λ A . Λ B . λ a . λ b . sigma · A · (λ _ : A . B) a b.

fst : ∀ A: ★. ∀ B: A ➔ ★. Sigma ·A ·B ➔ A
  = Λ A. Λ B. λ p. σ p {sigma a _ ➔ a}.

snd : ∀ A: ★. ∀ B: A ➔ ★. Π p: Sigma ·A ·B. B (fst p)
  = Λ A. Λ B. λ p. σ p @(λ x: Sigma ·A ·B. B (fst x)) {sigma _ b ➔ b}.

curry : ∀ A: ★. ∀ B: A ➔ ★. ∀ X: ★.
  (Sigma ·A ·B ➔ X) ➔ Π a: A. Π b: B a. X
= Λ A. Λ B. Λ X. λ f. λ a. λ b. f (sigma a b).

uncurry : ∀ A: ★. ∀ B: A ➔ ★. ∀ X: ★.
  (Π a: A. Π b: B a. X) ➔ Sigma ·A ·B ➔ X
= Λ A. Λ B. Λ X. λ f. λ p. σ p {
  | sigma a b ➔ f a b
  }.

pairMap
: ∀ A: ★. ∀ B: ★. ∀ C: ★. ∀ D: ★.
  (A ➔ C) ➔ (B ➔ D) ➔ Pair ·A ·B ➔ Pair ·C ·D
= Λ A. Λ B. Λ C. Λ D. λ f. λ g. λ p.
  σ p {sigma a b ➔ sigma (f a) (g b)}.

import ../core/cast .

castSigmaFst
: ∀ A1: ★. ∀ A2: ★. ∀ B: A2 ➔ ★. ∀ c: Cast ·A1 ·A2.
  Cast ·(Sigma ·A1 ·(λ x: A1. B (elimCast -c x))) ·(Sigma ·A2 ·B)
= Λ A1. Λ A2. Λ B. Λ c.
  intrCastI -λ x. σ x { sigma a b ➔ [ sigma (elimCast -c a) b , β{|sigma a b|} ] } .

castSigmaSnd
: ∀ A: ★. ∀ B1: A ➔ ★. ∀ B2: A ➔ ★. (Π x: A. Cast ·(B1 x) ·(B2 x)) ➾
  Cast ·(Sigma ·A ·B1) ·(Sigma ·A ·B2)
= Λ A. Λ B1. Λ B2. Λ c.
  intrCastI -λ x. σ x { sigma a b ➔ [ sigma a (elimCast -(c a) b) , β{|sigma a b|} ] } .
