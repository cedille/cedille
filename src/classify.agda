import cedille-options
open import general-util
module classify (options : cedille-options.options)
                {mF : Set ‚Üí Set} ‚¶É mFm : monad mF ‚¶Ñ (write-to-log : string ‚Üí mF ‚ä§) where

open import cedille-types
open import constants
open import conversion (cedille-options.options.disable-conv options)
  using (conv-term ; conv-t ; conv-tpkd ; hnf ; unfold-head-elab ; inconv ; conv-type ; hanf ; unfold-head ; ctxt-term-def ; ctxt-type-def ; unfold-no-defs ; ctxt-datatype-decl ; ctxt-datatype-undef)
open import ctxt
open import datatype-util
open import elab-util options
open import free-vars
open import meta-vars options {mF} ‚¶É mFm ‚¶Ñ
open import rename
open import resugar
open import rewriting
open import spans options {mF} ‚¶É mFm ‚¶Ñ
open import subst
open import syntax-util
open import type-util
open import to-string options
open import untyped-spans options {mF} ‚¶É mFm ‚¶Ñ

span-error-t : Set
span-error-t = (string √ó ùïÉ tagged-val)

{-# TERMINATING #-}
check-term : ctxt ‚Üí ex-tm ‚Üí (T? : maybe type) ‚Üí spanM (check-ret T? term)
check-type : ctxt ‚Üí ex-tp ‚Üí (k? : maybe kind) ‚Üí spanM (check-ret k? type)
check-kind : ctxt ‚Üí ex-kd ‚Üí spanM kind
check-tpkd : ctxt ‚Üí ex-tk ‚Üí spanM tpkd
check-args : ctxt ‚Üí ex-args ‚Üí params ‚Üí spanM args
check-let : ctxt ‚Üí ex-def ‚Üí erased? ‚Üí posinfo ‚Üí posinfo ‚Üí spanM (ctxt √ó var √ó tagged-val √ó (‚àÄ {ed : exprd} ‚Üí ‚ü¶ ed ‚üß ‚Üí ‚ü¶ ed ‚üß) √ó (term ‚Üí term))
check-mu : ctxt ‚Üí posinfo ‚Üí posinfo ‚Üí var ‚Üí ex-tm ‚Üí maybe ex-tp ‚Üí posinfo ‚Üí ex-cases ‚Üí posinfo ‚Üí (T? : maybe type) ‚Üí spanM (check-ret T? term)
check-sigma : ctxt ‚Üí posinfo ‚Üí maybe ex-tm ‚Üí ex-tm ‚Üí maybe ex-tp ‚Üí posinfo ‚Üí ex-cases ‚Üí posinfo ‚Üí (T? : maybe type) ‚Üí spanM (check-ret T? term)
get-datatype-info-from-head-type : ctxt ‚Üí var ‚Üí ùïÉ tmtp ‚Üí spanM (span-error-t ‚äé datatype-info)
check-sigma-evidence : ctxt ‚Üí maybe ex-tm ‚Üí var ‚Üí ùïÉ tmtp ‚Üí spanM (span-error-t ‚äé (term √ó (term ‚Üí term) √ó datatype-info))

check-cases : ctxt ‚Üí ex-cases ‚Üí (D‚Çì : var) ‚Üí (ctrs : trie type) ‚Üí renamectxt ‚Üí (ctr-ps : args) ‚Üí (drop-as : ‚Ñï) ‚Üí type ‚Üí (ctxt ‚Üí term ‚Üí type ‚Üí term) ‚Üí (ctxt ‚Üí type ‚Üí kind ‚Üí type) ‚Üí spanM (cases √ó err-m)
check-case : ctxt ‚Üí ex-case ‚Üí (earlier : stringset) ‚Üí (D‚Çì : var) ‚Üí (ctrs : trie (type √ó params √ó ùïÉ tmtp)) ‚Üí renamectxt ‚Üí (ctr-ps : args) ‚Üí (drop-as : ‚Ñï) ‚Üí type ‚Üí (ctxt ‚Üí term ‚Üí type ‚Üí term) ‚Üí (ctxt ‚Üí type ‚Üí kind ‚Üí type) ‚Üí spanM (case √ó trie (type √ó params √ó ùïÉ tmtp))
check-refinement : ctxt ‚Üí type ‚Üí kind ‚Üí spanM (type √ó ùïÉ tagged-val √ó err-m)

synth-tmtp' : ‚àÄ {b X} ‚Üí ctxt ‚Üí if b then ex-tm else ex-tp ‚Üí (if b then term else type ‚Üí if b then type else kind ‚Üí spanM X) ‚Üí spanM X
synth-tmtp' {tt} Œì t f = check-term Œì t nothing >>= uncurry f
synth-tmtp' {ff} Œì T f = check-type Œì T nothing >>= uncurry f

check-tmtp' : ‚àÄ {b X} ‚Üí ctxt ‚Üí if b then ex-tm else ex-tp ‚Üí if b then type else kind ‚Üí (if b then term else type ‚Üí spanM X) ‚Üí spanM X
check-tmtp' {tt} Œì t T f = check-term Œì t (just T) >>= f
check-tmtp' {ff} Œì T k f = check-type Œì T (just k) >>= f

check-tpkd' : ‚àÄ {b X} ‚Üí ctxt ‚Üí if b then ex-kd else ex-tk ‚Üí (if b then kind else tpkd ‚Üí spanM X) ‚Üí spanM X
check-tpkd' {tt} Œì k f = check-kind Œì k >>= f
check-tpkd' {ff} Œì k f = check-tpkd Œì k >>= f

lambda-bound-conv? : ctxt ‚Üí var ‚Üí tpkd ‚Üí tpkd ‚Üí ùïÉ tagged-val ‚Üí ùïÉ tagged-val √ó err-m
lambda-bound-conv? Œì x tk tk' ts with conv-tpkd Œì tk tk'
...| tt = ts , nothing
...| ff =
  (to-string-tag-tk "declared classifier" Œì tk' ::
   to-string-tag-tk "expected classifier" Œì tk :: ts) ,
  just "The classifier given for a Œª-bound variable is not the one we expected"

id' = id

hnf-of : ‚àÄ {X : Set} {ed} ‚Üí ctxt ‚Üí ‚ü¶ ed ‚üß ‚Üí (‚ü¶ ed ‚üß ‚Üí X) ‚Üí X
hnf-of Œì t f = f (hnf Œì unfold-head-elab t)

-- "‚ä¢" = "\vdash" or "\|-"
-- "‚áí" = "\r="
-- "‚áê" = "\l="
infixr 2 hnf-of id' check-tpkd' check-tmtp' synth-tmtp'
syntax synth-tmtp' Œì t (Œª t~ ‚Üí f) = Œì ‚ä¢ t ‚Üù t~ ‚áí f
syntax check-tmtp' Œì t T f = Œì ‚ä¢ t ‚áê T ‚Üù f
syntax check-tpkd' Œì k f = Œì ‚ä¢ k ‚Üù f
syntax id' (Œª x ‚Üí f) = x / f -- Supposed to look like a horizontal bar (as in typing rules)
syntax hnf-of Œì t f = Œì ‚ä¢ t =Œ≤= f


-- t [-]t'
check-term Œì (ExApp t e t') T‚Çë? =
  check-term-spine Œì (ExApp t e t') (proto-maybe T‚Çë?) tt
    on-fail return-when (Hole (term-start-pos t)) (TpHole (term-start-pos t))
    >>=m (uncurry return-when ‚àò check-term-spine-elim Œì)
  where open import type-inf options {mF} check-term check-type

-- t ¬∑T
check-term Œì (ExAppTp t‚Çï T‚Çê) T‚Çë? =
-- "Œì ‚ä¢ t‚Çï ‚Üù t‚Çï~ ‚áí T‚Çï~ /" desugars to "synth-tmtp' Œì t‚Çï Œª t‚Çï~ T‚Çï~ ‚Üí"
  Œì ‚ä¢ t‚Çï ‚Üù t‚Çï~ ‚áí T‚Çï~ /
  Œì ‚ä¢ T‚Çï~ =Œ≤= Œª where
    (TpAbs tt x (Tkk k‚Çê) T·µ£) ‚Üí
      Œì ‚ä¢ T‚Çê ‚áê k‚Çê ‚Üù T‚Çê~ /
      let T·µ£ = [ Œì - T‚Çê~ / x ] T·µ£ in
      [- AppTp-span tt (term-start-pos t‚Çï) (type-end-pos T‚Çê) (maybe-to-checking T‚Çë?)
           (head-type Œì T‚Çï~ :: type-data Œì T·µ£ :: expected-type-if Œì T‚Çë?)
           (check-for-type-mismatch-if Œì "synthesized" T‚Çë? T·µ£) -]
      return-when (AppTp t‚Çï~ T‚Çê~) T·µ£
    T‚Çï'~ ‚Üí
      untyped-type Œì T‚Çê >>= Œª T‚Çê~ ‚Üí
      [- AppTp-span tt (term-start-pos t‚Çï) (type-end-pos T‚Çê) (maybe-to-checking T‚Çë?)
           (head-type Œì T‚Çï'~ :: arg-type Œì T‚Çê~ :: expected-type-if Œì T‚Çë?)
           (unless (is-hole T‚Çï'~)
              ("The type synthesized from the head does not allow it to be applied" ^
               " to a type argument")) -]
      return-when (AppTp t‚Çï~ T‚Çê~) (TpHole (term-start-pos t‚Çï))

-- Œ≤[<t?>][{t?'}]
check-term Œì (ExBeta pi t? t?') T‚Çë? =
  maybe-map (Œª {(PosTm t _) ‚Üí untyped-term Œì t}) t?  >>=? Œª t?~  ‚Üí
  maybe-map (Œª {(PosTm t _) ‚Üí untyped-term Œì t}) t?' >>=? Œª t?'~ ‚Üí
  let t'~ = maybe-else' t?'~ id-term id
      e-t~ = maybe-else' T‚Çë?
        (maybe-else' t?~
          (inj‚ÇÅ ([] , "When synthesizing, specify what equality to prove with Œ≤<...>"))
          (Œª t ‚Üí inj‚ÇÇ (t , nothing)))
        Œª T‚Çë ‚Üí Œì ‚ä¢ T‚Çë =Œ≤= (Œª where
          (TpEq t‚ÇÅ t‚ÇÇ) ‚Üí
            if conv-term Œì t‚ÇÅ t‚ÇÇ
              then maybe-else' (t?~ >>= Œª t~ ‚Üí check-for-type-mismatch Œì "computed"
                                    (TpEq t~ t~) (TpEq t‚ÇÅ t‚ÇÇ) >>= Œª e ‚Üí just (e , t~))
                     (inj‚ÇÇ (t‚ÇÅ , just t‚ÇÇ))
                     (uncurry Œª e t~ ‚Üí inj‚ÇÅ ([ type-data Œì (TpEq t~ t~) ] , e))
              else inj‚ÇÅ ([] , "The two terms in the equation are not Œ≤-equal")
          T‚Çï ‚Üí inj‚ÇÅ ([] , "The expected type is not an equation"))
      e? = either-else' e-t~ (map-snd just) Œª _ ‚Üí [] , nothing
      f‚Çì = fresh-var Œì "x"
      t~T~ = either-else' e-t~ (Œª _ ‚Üí Hole pi , TpEq (Hole pi) (Hole pi))
             $ uncurry Œª t‚ÇÅ ‚Üí maybe-else (Beta t‚ÇÅ t'~ , TpEq t‚ÇÅ t‚ÇÅ)
                                Œª t‚ÇÇ ‚Üí (Beta t‚ÇÅ t'~) , TpEq t‚ÇÅ t‚ÇÇ in
  [- uncurry (Œª tvs ‚Üí Beta-span pi (term-end-pos (ExBeta pi t? t?')) (maybe-to-checking T‚Çë?)
         (expected-type-if Œì T‚Çë? ++ tvs)) e? -]
  uncurry return-when t~T~

-- œá [T?] - t
check-term Œì (ExChi pi T? t) T‚Çë? =
  (maybe-else' T?
    (check-term Œì t nothing)
    Œª T ‚Üí Œì ‚ä¢ T ‚áê KdStar ‚Üù T~ /
          Œì ‚ä¢ t ‚áê T~ ‚Üù t~ /
          return2 t~ T~
  ) >>= uncurry Œª t~ T~ ‚Üí
  [- Chi-span Œì pi (just T~) t (maybe-to-checking T‚Çë?)
       (type-data Œì T~ :: expected-type-if Œì T‚Çë?)
       (check-for-type-mismatch-if Œì
         (maybe-else' T? "synthesized" (const "computed")) T‚Çë? T~) -]
  return-when t~ T~

-- Œ¥ [T?] - t
check-term Œì (ExDelta pi T? t) T‚Çë? =
  Œì ‚ä¢ t ‚Üù t~ ‚áí Tcontra /
  maybe-else' T?
    (return (maybe-else' T‚Çë? (TpAbs Erased "X" (Tkk KdStar) (TpVar "X")) id))
    (Œª T ‚Üí Œì ‚ä¢ T ‚áê KdStar ‚Üù return) >>= Œª T~' ‚Üí
  let b = Œì ‚ä¢ Tcontra =Œ≤= Œª {(TpEq t‚ÇÅ t‚ÇÇ) ‚Üí when (inconv Œì t‚ÇÅ t‚ÇÇ) (t‚ÇÅ , t‚ÇÇ); _ ‚Üí nothing}
      b? = unless (conv-type Œì Tcontra (TpEq tt-term ff-term)) triv >> b in
  [- Delta-span pi t (maybe-to-checking T‚Çë?)
      (to-string-tag "the contradiction" Œì Tcontra ::
       type-data Œì T~' :: expected-type-if Œì T‚Çë?)
       (maybe-not b >> just
         "We could not find a contradiction in the synthesized type of the subterm") -]
  return-when (Delta b? T~' t~) T~'

-- Œµ[lr][-?] t
check-term Œì (ExEpsilon pi lr -? t) T‚Çë? =
  let hnf-from = if -? then hanf Œì tt else hnf Œì unfold-head
      update-eq : term ‚Üí term ‚Üí type
      update-eq = Œª t‚ÇÅ t‚ÇÇ ‚Üí uncurry TpEq $ maybe-else' lr (hnf-from t‚ÇÅ , hnf-from t‚ÇÇ) Œª lr ‚Üí
                    if lr then (t‚ÇÅ , hnf-from t‚ÇÇ) else (hnf-from t‚ÇÅ , t‚ÇÇ) in
  case-ret {m = T‚Çë?}
    (Œì ‚ä¢ t ‚Üù t~ ‚áí T~ /
     Œì ‚ä¢ T~ =Œ≤= Œª where
       (TpEq t‚ÇÅ t‚ÇÇ) ‚Üí
         let T·µ£ = update-eq t‚ÇÅ t‚ÇÇ in
         [- Epsilon-span pi lr -? t (maybe-to-checking T‚Çë?) [ type-data Œì T·µ£ ] nothing -]
         return2 t~ T·µ£
       T‚Çï ‚Üí
         [- Epsilon-span pi lr -? t (maybe-to-checking T‚Çë?)
              [ to-string-tag "synthesized type" Œì T‚Çï ]
              (unless (is-hole T‚Çï)
                 "The synthesized type of the body is not an equation") -]
         return2 t~ T‚Çï)
    Œª T‚Çë ‚Üí Œì ‚ä¢ T‚Çë =Œ≤= Œª where
      (TpEq t‚ÇÅ t‚ÇÇ) ‚Üí
        [- Epsilon-span pi lr -? t (maybe-to-checking T‚Çë?)
             [ expected-type Œì (TpEq t‚ÇÅ t‚ÇÇ) ] nothing -]
        Œì ‚ä¢ t ‚áê update-eq t‚ÇÅ t‚ÇÇ ‚Üù return
      T‚Çï ‚Üí
        [- Epsilon-span pi lr -? t (maybe-to-checking T‚Çë?) [ expected-type Œì T‚Çï ]
             (unless (is-hole T‚Çï) "The expected type is not an equation") -]
        untyped-term Œì t

-- ‚óè
check-term Œì (ExHole pi) T‚Çë? =
  [- hole-span Œì pi T‚Çë? (maybe-to-checking T‚Çë?) [] -]
  return-when (Hole pi) (TpHole pi)

-- [ t‚ÇÅ , t‚ÇÇ [@ T‚Çò,?] ]
check-term Œì (ExIotaPair pi t‚ÇÅ t‚ÇÇ T‚Çò? pi') T‚Çë? =
  maybe-else' {B = spanM (err-m √ó ùïÉ tagged-val √ó term √ó term √ó term √ó type)} T‚Çë?
    (maybe-else' T‚Çò?
       (untyped-term Œì t‚ÇÅ >>= Œª t‚ÇÅ~ ‚Üí
        untyped-term Œì t‚ÇÇ >>= Œª t‚ÇÇ~ ‚Üí
        return (just "Iota pairs require a specified type when synthesizing" , [] ,
                t‚ÇÅ~ , t‚ÇÅ~ , t‚ÇÇ~ , TpHole pi))
       Œª {(ExGuide pi'' x T‚ÇÇ) ‚Üí
            Œì ‚ä¢ t‚ÇÅ ‚Üù t‚ÇÅ~ ‚áí T‚ÇÅ~ /
            (Œì , pi'' - x :` Tkt T‚ÇÅ~) ‚ä¢ T‚ÇÇ ‚áê KdStar ‚Üù T‚ÇÇ~ /
            Œì ‚ä¢ t‚ÇÇ ‚áê [ Œì - t‚ÇÅ~ / (pi'' % x) ] T‚ÇÇ~ ‚Üù t‚ÇÇ~ /
            let T‚ÇÇ~ = [ Œì - Var x / (pi'' % x) ] T‚ÇÇ~
                bd = binder-data Œì pi'' x (Tkt T‚ÇÅ~) ff nothing
                       (type-start-pos T‚ÇÇ) (type-end-pos T‚ÇÇ) in
            [- Var-span Œì pi'' x checking [ type-data Œì T‚ÇÅ~ ] nothing -]
            return (nothing , (type-data Œì (TpIota x T‚ÇÅ~ T‚ÇÇ~) :: [ bd ]) ,
                    IotaPair t‚ÇÅ~ t‚ÇÇ~ x T‚ÇÇ~ , t‚ÇÅ~ , t‚ÇÇ~ , TpIota x T‚ÇÅ~ T‚ÇÇ~)})
    (Œª T‚Çë ‚Üí Œì ‚ä¢ T‚Çë =Œ≤= Œª where
      (TpIota x T‚ÇÅ T‚ÇÇ) ‚Üí
        Œì ‚ä¢ t‚ÇÅ ‚áê T‚ÇÅ ‚Üù t‚ÇÅ~ /
        maybe-else' T‚Çò?
          (Œì ‚ä¢ t‚ÇÇ ‚áê [ Œì - t‚ÇÅ~ / x ] T‚ÇÇ ‚Üù t‚ÇÇ~ /
           return (nothing , (type-data Œì (TpIota x T‚ÇÅ T‚ÇÇ) :: [ expected-type Œì T‚Çë ]) ,
                   IotaPair t‚ÇÅ~ t‚ÇÇ~ x T‚ÇÇ , t‚ÇÅ~ , t‚ÇÇ~ , TpIota x T‚ÇÅ T‚ÇÇ))
          Œª {(ExGuide pi'' x' T‚Çò) ‚Üí
               (Œì , pi'' - x' :` Tkt T‚ÇÅ) ‚ä¢ T‚Çò ‚áê KdStar ‚Üù T‚Çò~ /
               let T‚Çò~ = [ Œì - Var x' / (pi'' % x') ] T‚Çò~
                   T‚ÇÇ = [ Œì - Var x' / x ] T‚ÇÇ
                   T‚Çõ = TpIota x' T‚ÇÅ T‚Çò~ in
               Œì ‚ä¢ t‚ÇÇ ‚áê [ Œì - t‚ÇÅ~ / x' ] T‚Çò~ ‚Üù t‚ÇÇ~ /
               [- Var-span Œì pi'' x checking [ type-data Œì T‚ÇÅ ] nothing -]
               return (check-for-type-mismatch Œì "computed" T‚Çò~ T‚ÇÇ ,
                       (type-data Œì T‚Çõ :: expected-type Œì (TpIota x' T‚ÇÅ T‚ÇÇ) ::
                        [ binder-data Œì pi'' x' (Tkt T‚ÇÅ) ff nothing
                            (type-start-pos T‚Çò) (type-end-pos T‚Çò) ]) ,
                       IotaPair t‚ÇÅ~ t‚ÇÇ~ x' T‚Çò~ , t‚ÇÅ~ , t‚ÇÇ~ , T‚Çõ)}
      T‚Çï ‚Üí
        untyped-term Œì t‚ÇÅ >>= Œª t‚ÇÅ~ ‚Üí
        untyped-term Œì t‚ÇÇ >>= Œª t‚ÇÇ~ ‚Üí
        return (unless (is-hole T‚Çï) "The expected type is not an iota-type" ,
                [ expected-type Œì T‚Çï ] , t‚ÇÅ~ , t‚ÇÅ~ , t‚ÇÇ~ , T‚Çï)) >>= Œª where
    (err? , tvs , t~ , t‚ÇÅ~ , t‚ÇÇ~ , T~) ‚Üí
      let conv-e = "The two components of the iota-pair are not convertible (as required)"
          conv-e? = unless (conv-term Œì t‚ÇÅ~ t‚ÇÇ~) conv-e
          conv-tvs = maybe-else' conv-e? [] Œª _ ‚Üí
              to-string-tag "hnf of the first component"  Œì (hnf Œì unfold-head t‚ÇÅ~) ::
            [ to-string-tag "hnf of the second component" Œì (hnf Œì unfold-head t‚ÇÇ~) ] in
      [- IotaPair-span pi pi' (maybe-to-checking T‚Çë?) (conv-tvs ++ tvs)
           (conv-e? ||-maybe err?) -]
      return-when t~ T~

-- t.(1 / 2)
check-term Œì (ExIotaProj t n pi) T‚Çë? =
  Œì ‚ä¢ t ‚Üù t~ ‚áí T~ /
  let n? = case n of Œª {"1" ‚Üí just Œπ1; "2" ‚Üí just Œπ2; _ ‚Üí nothing} in
  maybe-else' n?
    ([- IotaProj-span t pi (maybe-to-checking T‚Çë?) (expected-type-if Œì T‚Çë?)
          (just "Iota-projections must use .1 or .2 only") -]
     return-when t~ (TpHole pi)) Œª n ‚Üí
    Œì ‚ä¢ T~ =Œ≤= Œª where
      (TpIota x T‚ÇÅ T‚ÇÇ) ‚Üí
        let T·µ£ = if n iff Œπ1 then T‚ÇÅ else ([ Œì - t~ / x ] T‚ÇÇ) in
        [- IotaProj-span t pi (maybe-to-checking T‚Çë?)
             (type-data Œì T·µ£ :: expected-type-if Œì T‚Çë?)
             (check-for-type-mismatch-if Œì "synthesized" T‚Çë? T·µ£) -]
        return-when (IotaProj t~ n) T·µ£
      T‚Çï~ ‚Üí
        [- IotaProj-span t pi (maybe-to-checking T‚Çë?)
             (head-type Œì T‚Çï~ :: expected-type-if Œì T‚Çë?)
             (unless (is-hole T‚Çï~)
                "The synthesized type of the head is not an iota-type") -]
        return-when (IotaProj t~ n) (TpHole pi)

-- Œª/Œõ x [: T?]. t
check-term Œì (ExLam pi e pi' x tk? t) T‚Çë? =
  [- punctuation-span "Lambda" pi (posinfo-plus pi 1) -]
  let erase-err : (exp act : erased?) ‚Üí tpkd ‚Üí term ‚Üí err-m √ó ùïÉ tagged-val
      erase-err = Œª where
        Erased NotErased tk t ‚Üí
          just ("The expected type is a ‚àÄ-abstraction (implicit input), " ^
                "but the term is a Œª-abstraction (explicit input)") , []
        NotErased Erased tk t ‚Üí
          just ("The expected type is a Œ†-abstraction (explicit input), " ^
                "but the term is a Œõ-abstraction (implicit input)") , []
        Erased Erased tk t ‚Üí
          maybe-else (nothing , []) (Œª e-tv ‚Üí just (fst e-tv) , [ snd e-tv ])
            (trie-lookup (free-vars (erase t)) x >>
             just ("The Œõ-bound variable occurs free in the erasure of the body" ,
                   erasure Œì t))
        NotErased NotErased (Tkk _) t ‚Üí
          just "Œª-terms must bind a term, not a type (use Œõ instead)" , []
        NotErased NotErased (Tkt _) t ‚Üí
          nothing , [] in
  case-ret {m = T‚Çë?}
    (maybe-else' tk?
      (untyped-term (Œì , pi' - x :` Tkt (TpHole pi')) t >>= Œª t~ ‚Üí
       [- Lam-span Œì synthesizing pi pi' e x (Tkt (TpHole pi')) t []
           (just ("We are not checking this abstraction against a type, " ^
                  "so a classifier must be given for the bound variable " ^ x)) -]
       return2 (Lam e x nothing (rename-var Œì (pi' % x) x t~)) (TpHole pi'))
      Œª tk ‚Üí
        Œì ‚ä¢ tk ‚Üù tk~ /
        (Œì , pi' - x :` tk~) ‚ä¢ t ‚Üù t~ ‚áí T~ /
        let T~ = rename-var Œì (pi' % x) x T~
            t~ = rename-var Œì (pi' % x) x t~
            T·µ£ = TpAbs e x tk~ T~ in
        [- var-span e (Œì , pi' - x :` tk~) pi' x checking tk~ nothing -]
        [- uncurry (Œª tvs ‚Üí Lam-span Œì synthesizing pi pi' e x tk~ t
               (type-data Œì T·µ£ :: tvs)) (twist-√ó (erase-err e e tk~ t~)) -]
        return2 (Lam e x (just tk~) t~) T·µ£)
    Œª T‚Çë ‚Üí Œì ‚ä¢ T‚Çë =Œ≤= Œª where
      (TpAbs e' x' tk T) ‚Üí
        maybe-map (check-tpkd Œì) tk? >>=? tk~? /
        let tk~ = maybe-else' tk~? tk id in
        --maybe-else' tk? (return tk) (Œª tk ‚Üí Œì ‚ä¢ tk ‚Üù return) >>= tk~ /
        (Œì , pi' - x :` tk~) ‚ä¢ t ‚áê rename-var Œì x' (pi' % x) T ‚Üù t~ /
        let x‚Çô = if x =string ignored-var && is-free-in x' T then x' else x
            t~ = rename-var Œì (pi' % x) x‚Çô t~
            T = rename-var Œì x' x‚Çô T
            T‚Çõ = TpAbs e x‚Çô tk~ T
            T‚Çë = TpAbs e' x‚Çô tk T
            v‚Çë = check-for-tpkd-mismatch-if Œì "computed" tk~? tk in
        [- var-span e (Œì , pi' - x :` tk~) pi' x (maybe-to-checking tk?) tk~ nothing -]
        [- uncurry (Œª err tvs ‚Üí Lam-span Œì checking pi pi' e x tk~ t
                 (type-data Œì T‚Çõ :: expected-type Œì T‚Çë :: tvs) (err ||-maybe v‚Çë))
             (erase-err e' e tk~ t~) -]
        return (Lam e x‚Çô (just tk~) t~)
      T‚Çï ‚Üí
        maybe-else' tk? (return (Tkt (TpHole pi'))) (check-tpkd Œì) >>= tk~ /
        untyped-term (Œì , pi' - x :` tk~) t >>= t~ /
        [- Lam-span Œì checking pi pi' e x (Tkt (TpHole pi')) t
             [ expected-type Œì T‚Çï ] (just "The expected type is not a ‚àÄ- or a Œ†-type") -]
        return (Lam e x (unless (is-hole -tk' tk~) tk~)
                 (rename-var Œì (pi' % x) x t~))

-- [d] - t
check-term Œì (ExLet pi e? d t) T‚Çë? =
  check-let Œì d e? (term-start-pos t) (term-end-pos t) >>= Œª where
    (Œì' , x , tv , œÉ , f) ‚Üí
      case-ret-body {m = T‚Çë?} (check-term Œì' t T‚Çë?) Œª t~ T~ ‚Üí
      [- punctuation-span "Parens (let)" pi (term-end-pos t) -]
      [- Let-span e? pi (term-end-pos t) (maybe-to-checking T‚Çë?)
           (maybe-else' T‚Çë? (type-data Œì T~) (expected-type Œì) :: [ tv ])
           (when (e? && is-free-in x (erase t~))
              (unqual-local x ^ "occurs free in the body of the term")) -]
      return-when (f t~) (œÉ T~)


-- open/close x - t
check-term Œì (ExOpen pi o pi' x t) T‚Çë? =
  let Œì? = ctxt-clarify-def Œì o x
      e? = maybe-not Œì? >> just (x ^ " does not have a definition that can be " ^
                                       (if o then "opened" else "closed")) in
  [- Var-span Œì pi' x (maybe-to-checking T‚Çë?) [ not-for-navigation ] nothing -]
  [- Open-span o pi x t (maybe-to-checking T‚Çë?) (expected-type-if Œì T‚Çë?) e? -]
  check-term (maybe-else' Œì? Œì id) t T‚Çë?

-- (t)
check-term Œì (ExParens pi t pi') T‚Çë? =
  [- punctuation-span "Parens (term)" pi pi' -]
  check-term Œì t T‚Çë?

-- œÜ t‚Çå - t‚ÇÅ {t‚ÇÇ}
check-term Œì (ExPhi pi t‚Çå t‚ÇÅ t‚ÇÇ pi') T‚Çë? =
  case-ret-body {m = T‚Çë?} (check-term Œì t‚ÇÅ T‚Çë?) Œª t‚ÇÅ~ T~ ‚Üí
  untyped-term Œì t‚ÇÇ >>= Œª t‚ÇÇ~ ‚Üí
  Œì ‚ä¢ t‚Çå ‚áê TpEq t‚ÇÅ~ t‚ÇÇ~ ‚Üù t‚Çå~ /
  [- Phi-span pi pi' (maybe-to-checking T‚Çë?)
       [ maybe-else' T‚Çë? (type-data Œì T~) (expected-type Œì)] nothing -]
  return-when (Phi t‚Çå~ t‚ÇÅ~ t‚ÇÇ~) T~

-- œÅ[+]<ns> t‚Çå [@ T‚Çò?] - t
check-term Œì (ExRho pi œÅ+ <ns> t‚Çå T‚Çò? t) T‚Çë? =
  Œì ‚ä¢ t‚Çå ‚Üù t‚Çå~ ‚áí T‚Çå /
  Œì ‚ä¢ T‚Çå =Œ≤= Œª where
    (TpEq t‚ÇÅ t‚ÇÇ) ‚Üí
      let t‚Çó = if isJust T‚Çë? then t‚ÇÅ else t‚ÇÇ
          t·µ£ = if isJust T‚Çë? then t‚ÇÇ else t‚ÇÅ
          tvs = Œª T~ T·µ£ ‚Üí to-string-tag "equation" Œì (TpEq t‚ÇÅ t‚ÇÇ) ::
                          maybe-else' T‚Çë?
                            (to-string-tag "type of second subterm" Œì T~)
                            (expected-type Œì) ::
                          [ to-string-tag "rewritten type" Œì T·µ£ ] in
      maybe-else' T‚Çò?
        (elim-pair (optNums-to-stringset <ns>) Œª ns ns-e? ‚Üí
         let x = fresh-var Œì "x"
             Œì' = ctxt-var-decl x Œì
             T-f = Œª T ‚Üí rewrite-type T Œì' œÅ+ ns (just t‚Çå~) t‚Çó x 0
             T·µ£-f = fst ‚àò T-f
             nn-f = snd ‚àò T-f
             T‚Çö-f = map-fst (post-rewrite Œì' x t‚Çå~ t·µ£) ‚àò T-f in
         maybe-else' T‚Çë?
           (Œì ‚ä¢ t ‚Üù t~ ‚áí T~ /
            return2 t~ T~)
           (Œª T‚Çë ‚Üí Œì ‚ä¢ t ‚áê fst (T‚Çö-f T‚Çë) ‚Üù t~ /
             return2 t~ T‚Çë) >>=c Œª t~ T~ ‚Üí
         elim-pair (T‚Çö-f T~) Œª T‚Çö nn ‚Üí
         [- Rho-span pi t‚Çå t (maybe-to-checking T‚Çë?) œÅ+
              (inj‚ÇÅ (fst nn)) (tvs T~ T‚Çö) (ns-e? (snd nn)) -]
         return-when (Rho t‚Çå~ x (erase (T·µ£-f T~)) t~) T‚Çö)
        Œª where
          (ExGuide pi' x T‚Çò) ‚Üí
            [- Var-span Œì pi' x untyped [] nothing -]
            let Œì' = Œì , pi' - x :` Tkt (TpHole pi') in
            untyped-type Œì' T‚Çò >>= Œª T‚Çò~ ‚Üí
            let T‚Çò~ = [ Œì' - Var x / (pi' % x) ] T‚Çò~
                T' = [ Œì' - t‚Çó / x ] T‚Çò~
                T'' = post-rewrite Œì' x t‚Çå~ t·µ£ (rewrite-at Œì' x (just t‚Çå~) tt T' T‚Çò~)
                check-str = if isJust T‚Çë? then "computed" else "synthesized" in
            maybe-else' T‚Çë?
              (check-term Œì t nothing)
              (Œª T‚Çë ‚Üí Œì ‚ä¢ t ‚áê T'' ‚Üù t~ /
                return2 t~ T‚Çë) >>=c Œª t~ T~ ‚Üí
            [- Rho-span pi t‚Çå t (maybe-to-checking T‚Çë?) œÅ+ (inj‚ÇÇ x) (tvs T~ T'')
                 (check-for-type-mismatch Œì check-str T' T~) -]
            return-when (Rho t‚Çå~ x T‚Çò~ t~) T''
    T‚Çï ‚Üí
      Œì ‚ä¢ t ‚Üù t~ ‚áí Œª T~ ‚Üí
      [- Rho-span pi t‚Çå t (maybe-to-checking T‚Çë?) œÅ+ (inj‚ÇÅ 1)
           (to-string-tag "type of first subterm" Œì T‚Çï ::
            [ to-string-tag "type of second subterm" Œì T~ ])
           (unless (is-hole T‚Çï)
              "We could not synthesize an equation from the first subterm") -]
      return-when t~ T~

-- œÇ t
check-term Œì (ExVarSigma pi t) T‚Çë? =
  case-ret
    (Œì ‚ä¢ t ‚Üù t~ ‚áí T /
     Œì ‚ä¢ T =Œ≤= Œª where
       (TpEq t‚ÇÅ t‚ÇÇ) ‚Üí
         [- VarSigma-span pi t synthesizing [ type-data Œì (TpEq t‚ÇÇ t‚ÇÅ) ] nothing -]
         return2 (VarSigma t~) (TpEq t‚ÇÇ t‚ÇÅ)
       T‚Çï ‚Üí
         [- VarSigma-span pi t synthesizing [ type-data Œì T‚Çï ]
           (unless (is-hole T‚Çï)
              "The synthesized type of the body is not an equation") -]
         return2 (VarSigma t~) T‚Çï)
  Œª T‚Çë ‚Üí
    Œì ‚ä¢ T‚Çë =Œ≤= Œª where
      (TpEq t‚ÇÅ t‚ÇÇ) ‚Üí
        Œì ‚ä¢ t ‚áê TpEq t‚ÇÇ t‚ÇÅ ‚Üù t~ /
        [- VarSigma-span pi t checking [ expected-type Œì (TpEq t‚ÇÅ t‚ÇÇ) ] nothing -]
        return (VarSigma t~)
      T‚Çï ‚Üí
        [- VarSigma-span pi t checking [ expected-type Œì T‚Çï ]
             (unless (is-hole T‚Çï)
                "The expected type is not an equation") -]
        untyped-term Œì t

-- Œ∏ t ts
check-term Œì (ExTheta pi Œ∏ t ts) T‚Çë? =
  case-ret {m = T‚Çë?}
    ([- Theta-span Œì pi Œ∏ t ts synthesizing [] (just
            "Theta-terms can only be used when checking (and we are synthesizing here)") -]
     return2 (Hole pi) (TpHole pi))
    Œª T‚Çë ‚Üí
      Œì ‚ä¢ t ‚Üù t~ ‚áí T /
      let x = case hnf Œì unfold-head t~ of Œª {(Var x) ‚Üí x; _ ‚Üí "x"}
          x' = fresh-var Œì x in
      Œì ‚ä¢ T =Œ≤= Œª where
        (TpAbs me x (Tkk kd) tp) ‚Üí
          (case Œ∏ of Œª where
            (AbstractVars vs) ‚Üí either-else' (wrap-vars vs T‚Çë) (return2 (TpHole pi) ‚àò just) Œª T‚Çò ‚Üí return2 T‚Çò nothing
            Abstract ‚Üí return2 (TpLam x' (Tkt T) (rename-var Œì x x' T‚Çë)) nothing
            AbstractEq ‚Üí return2 (TpLam x' (Tkt T) (TpAbs Erased ignored-var (Tkt (TpEq t~ (Var x'))) (rename-var Œì x x' T‚Çë))) nothing) >>=c Œª T‚Çò e‚ÇÅ ‚Üí
          check-refinement Œì T‚Çò kd >>=c Œª T‚Çò ‚Üí uncurry Œª tvs e‚ÇÇ ‚Üí
          let tp' = [ Œì - T‚Çò / x ] tp in
          check-lterms ts (AppTp t~ T‚Çò) tp' >>=c Œª t~ T~ ‚Üí
          let e‚ÇÉ = check-for-type-mismatch Œì "synthesized" T~ T‚Çë
              t~ = case Œ∏ of Œª {AbstractEq ‚Üí AppEr t~ (Beta (erase t~) id-term); _ ‚Üí t~} in
          [- Theta-span Œì pi Œ∏ t ts checking
               (type-data Œì T~ :: expected-type Œì T‚Çë :: tvs)
               (e‚ÇÅ ||-maybe (e‚ÇÇ ||-maybe e‚ÇÉ)) -]
          return t~
        T‚Çï ‚Üí
          [- Theta-span Œì pi Œ∏ t ts checking (head-type Œì T‚Çï :: expected-type Œì T‚Çë :: [])
               (unless (is-hole T‚Çï) "The synthesized type of the head is not a type-forall") -]
          return (Hole pi)
  where
  check-lterms : ùïÉ lterm ‚Üí term ‚Üí type ‚Üí spanM (term √ó type)
  check-lterms [] tm tp = return2 tm tp
  check-lterms (Lterm me t :: ts) tm tp =
    Œì ‚ä¢ tp =Œ≤= Œª where
      (TpAbs me' x (Tkt T) T') ‚Üí
        Œì ‚ä¢ t ‚áê T ‚Üù t~ /
        (if me iff me' then return triv else spanM-add
          (Theta-span Œì pi Œ∏ t [] checking [] (just "Mismatched erasure of theta arg"))) >>
        check-lterms ts (if me then AppEr tm t~ else App tm t~) ([ Œì - t~ / x ] T')
      T‚Çï ‚Üí
        (if is-hole T‚Çï then id
          else [- Theta-span Œì pi Œ∏ t [] checking [ expected-type Œì T‚Çï ]
                    (just "The expected type is not an arrow type") -]_)
        (untyped-term Œì t >>= Œª t~ ‚Üí check-lterms ts (if me then AppEr tm t~ else App tm t~) T‚Çï)

  var-not-in-scope : var ‚Üí string
  var-not-in-scope x =
    "We could not compute a motive from the given term because " ^
    "the abstracted variable " ^ x ^ " is not in scope"
  
  wrap-var : var ‚Üí type ‚Üí string ‚äé type
  wrap-var x T =
    let x' = fresh-var Œì x in
    maybe-else' (ctxt-lookup-tpkd-var Œì x)
      (inj‚ÇÅ (var-not-in-scope x))
      Œª {(qx , as , tk) ‚Üí inj‚ÇÇ (TpLam x' tk (rename-var Œì qx x' T))}
  wrap-vars : ùïÉ var ‚Üí type ‚Üí var ‚äé type
  wrap-vars [] T = inj‚ÇÇ T
  wrap-vars (x :: xs) T = wrap-vars xs T >>= wrap-var x

  motive : var ‚Üí var ‚Üí type ‚Üí type ‚Üí theta ‚Üí term ‚Üí type
  motive x x' T T' Abstract t = TpLam x' (Tkt T') (rename-var Œì x x' T)
  motive x x' T T' AbstractEq t = TpLam x' (Tkt T') (TpAbs Erased ignored-var (Tkt (TpEq t (Var x'))) (rename-var Œì x x' T))
  motive x x' T T' (AbstractVars vs) t = T -- Shouldn't happen


-- Œº(' / rec.) t [@ T‚Çò?] {ms...}
check-term Œì (ExMu pi1 pi2 x t T‚Çò? pi' ms pi'') T‚Çë? =
  check-mu Œì pi1 pi2 x t T‚Çò? pi' ms pi'' T‚Çë?

check-term Œì (ExSigma pi t? t T‚Çò? pi' ms pi'') T‚Çë? =
  check-sigma Œì pi t? t T‚Çò? pi' ms pi'' T‚Çë?

-- x
check-term Œì (ExVar pi x) T‚Çë? =
  maybe-else' (ctxt-lookup-term-var Œì x)
    ([- Var-span Œì pi x (maybe-to-checking T‚Çë?)
          (expected-type-if Œì T‚Çë?)
          (just "Missing a type for a term variable") -]
     return-when (Var x) (TpHole pi))
    Œª {(qx , as , T) ‚Üí
      [- Var-span Œì pi x (maybe-to-checking T‚Çë?)
           (type-data Œì T :: expected-type-if Œì T‚Çë?)
           (check-for-type-mismatch-if Œì "computed" T‚Çë? T) -]
      return-when (apps-term (Var qx) as) T}

-- ‚àÄ/Œ† x : tk. T
check-type Œì (ExTpAbs pi e pi' x tk T) k‚Çë? =
  Œì ‚ä¢ tk ‚Üù tk~ /
  (Œì , pi' - x :` tk~) ‚ä¢ T ‚áê KdStar ‚Üù T~ /
  let T~ = rename-var Œì (pi' % x) x T~ in
  [- punctuation-span "Forall" pi (posinfo-plus pi 1) -]
  [- var-span ff (Œì , pi' - x :` tk~) pi' x checking tk~ nothing -]
  [- TpQuant-span Œì e pi pi' x tk~ T (maybe-to-checking k‚Çë?)
       (kind-data Œì KdStar :: expected-kind-if Œì k‚Çë?)
       (check-for-kind-mismatch-if Œì "computed" k‚Çë? KdStar) -]
  return-when (TpAbs e x tk~ T~) KdStar

-- Œπ x : T‚ÇÅ. T‚ÇÇ
check-type Œì (ExTpIota pi pi' x T‚ÇÅ T‚ÇÇ) k‚Çë? =
  Œì ‚ä¢ T‚ÇÅ ‚áê KdStar ‚Üù T‚ÇÅ~ /
  (Œì , pi' - x :` Tkt T‚ÇÅ~) ‚ä¢ T‚ÇÇ ‚áê KdStar ‚Üù T‚ÇÇ~ /
  let T‚ÇÇ~ = rename-var Œì (pi' % x) x T‚ÇÇ~ in
  [- punctuation-span "Iota" pi (posinfo-plus pi 1) -]
  [- Var-span (Œì , pi' - x :` Tkt T‚ÇÅ~) pi' x checking [ type-data Œì T‚ÇÅ~ ] nothing -]
  [- Iota-span Œì pi pi' x T‚ÇÅ~ T‚ÇÇ (maybe-to-checking k‚Çë?)
       (kind-data Œì KdStar :: expected-kind-if Œì k‚Çë?)
       (check-for-kind-mismatch-if Œì "computed" k‚Çë? KdStar) -]
  return-when (TpIota x T‚ÇÅ~ T‚ÇÇ~) KdStar

-- {^ T ^} (generated by theta)
check-type Œì (ExTpNoSpans T pi) k‚Çë? = check-type Œì T k‚Çë? >>=spand return

-- [d] - T
check-type Œì (ExTpLet pi d T) k‚Çë? =
  check-let Œì d ff (type-start-pos T) (type-end-pos T) >>= Œª where
    (Œì' , x , tv , œÉ , f) ‚Üí
      case-ret-body {m = k‚Çë?} (check-type Œì' T k‚Çë?) Œª T~ k~ ‚Üí
      [- punctuation-span "Parens (let)" pi (type-end-pos T) -]
      [- TpLet-span pi (type-end-pos T) (maybe-to-checking k‚Çë?)
           (maybe-else' k‚Çë? (kind-data Œì k~) (expected-kind Œì) :: [ tv ]) -]
      return-when (œÉ T~) (œÉ k~)

-- T ¬∑ T'
check-type Œì (ExTpApp T T') k‚Çë? =
  Œì ‚ä¢ T ‚Üù T~ ‚áí k‚Çï /
  Œì ‚ä¢ k‚Çï =Œ≤= Œª where
    (KdAbs x (Tkk dom) cod) ‚Üí
      Œì ‚ä¢ T' ‚áê dom ‚Üù T'~ /
      let cod' = [ Œì - T'~ / x ] cod in
      [- TpApp-span (type-start-pos T) (type-end-pos T') (maybe-to-checking k‚Çë?)
           (kind-data Œì cod' :: expected-kind-if Œì k‚Çë?)
           (check-for-kind-mismatch-if Œì "synthesized" k‚Çë? cod') -]
      return-when (TpAppTp T~ T'~) cod'
    k‚Çï' ‚Üí
      untyped-type Œì T' >>= T'~ /
      [- TpApp-span (type-start-pos T) (type-end-pos T') (maybe-to-checking k‚Çë?)
           (head-kind Œì k‚Çï' :: expected-kind-if Œì k‚Çë?)
           (unless (is-hole k‚Çï') $
              "The synthesized kind of the head does not allow it to be applied" ^
              " to a type argument") -]
      return-when (TpAppTp T~ T'~) (KdHole (type-start-pos T))

-- T t
check-type Œì (ExTpAppt T t) k‚Çë? =
  Œì ‚ä¢ T ‚Üù T~ ‚áí k‚Çï /
  Œì ‚ä¢ k‚Çï =Œ≤= Œª where
    (KdAbs x (Tkt dom) cod) ‚Üí
      Œì ‚ä¢ t ‚áê dom ‚Üù t~ /
      let cod' = [ Œì - t~ / x ] cod in
      [- TpAppt-span (type-start-pos T) (term-end-pos t) (maybe-to-checking k‚Çë?)
           (kind-data Œì cod' :: expected-kind-if Œì k‚Çë?)
           (check-for-kind-mismatch-if Œì "synthesized" k‚Çë? cod') -]
      return-when (TpAppTm T~ t~) cod'
    k‚Çï' ‚Üí
      untyped-term Œì t >>= t~ /
      [- TpAppt-span (type-start-pos T) (term-end-pos t) (maybe-to-checking k‚Çë?)
           (head-kind Œì k‚Çï' :: expected-kind-if Œì k‚Çë?)
           (unless (is-hole k‚Çï') $
              "The synthesized kind of the head does not allow it to be applied" ^
              " to a term argument") -]
      return-when (TpAppTm T~ t~) (KdHole (type-start-pos T))

-- T ‚ûî/‚ûæ T'
check-type Œì (ExTpArrow T e T') k‚Çë? =
  Œì ‚ä¢ T ‚áê KdStar ‚Üù T~ /
  Œì ‚ä¢ T' ‚áê KdStar ‚Üù T'~ /
  [- TpArrow-span T T' (maybe-to-checking k‚Çë?)
       (kind-data Œì KdStar :: expected-kind-if Œì k‚Çë?)
       (check-for-kind-mismatch-if Œì "computed" k‚Çë? KdStar) -]
  return-when (TpAbs e ignored-var (Tkt T~) T'~) KdStar

-- { t‚ÇÅ ‚âÉ t‚ÇÇ }
check-type Œì (ExTpEq pi t‚ÇÅ t‚ÇÇ pi') k‚Çë? =
  untyped-term Œì t‚ÇÅ >>= t‚ÇÅ~ /
  untyped-term Œì t‚ÇÇ >>= t‚ÇÇ~ /
  [- punctuation-span "Parens (equation)" pi pi' -]
  [- TpEq-span pi pi' (maybe-to-checking k‚Çë?)
       (kind-data Œì KdStar :: expected-kind-if Œì k‚Çë?)
       (check-for-kind-mismatch-if Œì "computed" k‚Çë? KdStar) -]
  return-when (TpEq t‚ÇÅ~ t‚ÇÇ~) KdStar

-- ‚óè
check-type Œì (ExTpHole pi) k‚Çë? =
  [- tp-hole-span Œì pi k‚Çë? (maybe-to-checking k‚Çë?) [] -]
  return-when (TpHole pi) (KdHole pi)

-- Œª x : tk. T
check-type Œì (ExTpLam pi pi' x tk T) k‚Çë? =
  [- punctuation-span "Lambda (type)" pi (posinfo-plus pi 1) -]
  Œì ‚ä¢ tk ‚Üù tk~ /
  case-ret
    ((Œì , pi' - x :` tk~) ‚ä¢ T ‚Üù T~ ‚áí k /
     let k‚Çõ = KdAbs x tk~ (rename-var Œì (pi' % x) x k) in
     [- var-span ff (Œì , pi' - x :` tk~) pi' x checking tk~ nothing -]
     [- TpLambda-span Œì pi pi' x tk~ T synthesizing [ kind-data Œì k‚Çõ ] nothing -]
     return2 (TpLam x tk~ (rename-var Œì (pi' % x) x T~)) k‚Çõ)
    Œª k‚Çë ‚Üí
      (Œì ‚ä¢ k‚Çë =Œ≤= Œª where
        (KdAbs x' tk' k) ‚Üí
          (Œì , pi' - x :` tk~) ‚ä¢ T ‚áê (rename-var Œì x' (pi' % x) k) ‚Üù T~ /
          let x‚Çô = if x =string ignored-var && is-free-in x' k then x' else x in
          return (x‚Çô , rename-var Œì (pi' % x) x‚Çô T~ , lambda-bound-conv? Œì x tk' tk~ [])
        k‚Çï ‚Üí
          (Œì , pi' - x :` tk~) ‚ä¢ T ‚Üù T~ ‚áí _ /
          return (x , rename-var Œì (pi' % x) x T~ , [] , unless (is-hole k‚Çï)
              "The expected kind is not an arrow- or Pi-kind")
      ) >>= Œª where
        (x‚Çô , T~ , tvs , e?) ‚Üí
          [- var-span ff (Œì , pi' - x :` tk~) pi' x checking tk~ nothing -]
          [- TpLambda-span Œì pi pi' x tk~ T checking (expected-kind Œì k‚Çë :: tvs) e? -]
          return (TpLam x‚Çô tk~ T~)

-- (T)
check-type Œì (ExTpParens pi T pi') k‚Çë? =
  [- punctuation-span "Parens (type)" pi pi' -]
  check-type Œì T k‚Çë?

-- x
check-type Œì (ExTpVar pi x) k‚Çë? =
  maybe-else' (ctxt-lookup-type-var Œì x)
    ([- TpVar-span Œì pi x (maybe-to-checking k‚Çë?) (expected-kind-if Œì k‚Çë?)
          (just "Undefined type variable") -]
     return-when (TpVar x) (KdHole pi)) Œª where
    (qx , as , k) ‚Üí
      [- TpVar-span Œì pi x (maybe-to-checking k‚Çë?)
           (expected-kind-if Œì k‚Çë? ++ [ kind-data Œì k ])
           (check-for-kind-mismatch-if Œì "computed" k‚Çë? k) -]
      return-when (apps-type (TpVar qx) as) k
  


-- Œ† x : tk. k
check-kind Œì (ExKdAbs pi pi' x tk k) =
  Œì ‚ä¢ tk ‚Üù tk~ /
  Œì , pi' - x :` tk~ ‚ä¢ k ‚Üù k~ /
  [- KdAbs-span Œì pi pi' x tk~ k checking nothing -]
  [- var-span ff Œì pi' x checking tk~ nothing -]
  [- punctuation-span "Pi (kind)" pi (posinfo-plus pi 1) -]
  return (KdAbs x tk~ (rename-var Œì (pi' % x) x k~))

-- tk ‚ûî k
check-kind Œì (ExKdArrow tk k) =
  Œì ‚ä¢ tk ‚Üù tk~ /
  Œì ‚ä¢ k ‚Üù k~ /
  [- KdArrow-span tk k checking nothing -]
  return (KdAbs ignored-var tk~ k~)

-- ‚óè
check-kind Œì (ExKdHole pi) =
  [- kd-hole-span pi checking -]
  return (KdHole pi)

-- (k)
check-kind Œì (ExKdParens pi k pi') =
  [- punctuation-span "Parens (kind)" pi pi' -]
  check-kind Œì k

-- ‚òÖ
check-kind Œì (ExKdStar pi) =
  [- Star-span pi checking nothing -]
  return KdStar

-- Œ∫ as...
check-kind Œì (ExKdVar pi Œ∫ as) =
  case ctxt-lookup-kind-var-def Œì Œ∫ of Œª where
    nothing ‚Üí
      [- KdVar-span Œì (pi , Œ∫) (args-end-pos (posinfo-plus-str pi Œ∫) as)
           [] checking [] (just "Undefined kind variable") -]
      return (KdHole pi)
    (just (ps , k)) ‚Üí
      check-args Œì as ps >>= Œª as~ ‚Üí
      [- KdVar-span Œì (pi , Œ∫) (args-end-pos (posinfo-plus-str pi Œ∫) as)
          ps checking (params-data Œì ps)
          (when (length as < length ps)
            ("Needed " ^ ‚Ñï-to-string (length ps ‚à∏ length as)
              ^ " further argument(s)")) -]
      return (fst (subst-params-args' Œì ps as~ k))


check-tpkd Œì (ExTkt T) = Tkt <$> check-type Œì T (just KdStar)
check-tpkd Œì (ExTkk k) = Tkk <$> check-kind Œì k

check-args Œì (ExTmArg me t :: as) (Param me' x (Tkt T) :: ps) =
  Œì ‚ä¢ t ‚áê T ‚Üù t~ /
  let e-s = mk-span "Argument" (term-start-pos t) (term-end-pos t)
              [ expected-type Œì T ] (just "Mismatched argument erasure") 
      e-m = Œª r ‚Üí if me iff me' then return {F = spanM} r else ([- e-s -] return {F = spanM} r) in
  check-args Œì as (subst-params Œì t~ x ps) >>= Œª as~ ‚Üí
  e-m ((if me then inj‚ÇÇ (inj‚ÇÅ t~) else inj‚ÇÅ t~) :: as~)
check-args Œì (ExTpArg T :: as) (Param _ x (Tkk k) :: ps) =
  Œì ‚ä¢ T ‚áê k ‚Üù T~ /
  check-args Œì as (subst-params Œì T~ x ps) >>= Œª as~ ‚Üí
  return (inj‚ÇÇ (inj‚ÇÇ T~) :: as~)
check-args Œì (ExTmArg me t :: as) (Param _ x (Tkk k) :: ps) =
  [- mk-span "Argument" (term-start-pos t) (term-end-pos t) [ expected-kind Œì k ]
       (just "Expected a type argument") -]
  return []
check-args Œì (ExTpArg T :: as) (Param me x (Tkt T') :: ps) =
  [- mk-span "Argument" (type-start-pos T) (type-end-pos T) [ expected-type Œì T' ]
       (just ("Expected a" ^ (if me then "n erased" else "") ^ " term argument")) -]
  return []
check-args Œì (a :: as) [] =
  let range = case a of Œª {(ExTmArg me t) ‚Üí term-start-pos t , term-end-pos t;
                           (ExTpArg T) ‚Üí type-start-pos T , type-end-pos T} in
  check-args Œì as [] >>= Œª as~ ‚Üí
  [- mk-span "Argument" (fst range) (snd range) [] (just "Too many arguments given") -]
  return []
check-args Œì [] _ = return []

check-erased-margs : ctxt ‚Üí posinfo ‚Üí posinfo ‚Üí term ‚Üí maybe type ‚Üí spanM ‚ä§
check-erased-margs Œì pi pi' t T? =
  let ps‚Çë = foldr (Œª {(Param me x tk) ps‚Çë ‚Üí if me then x :: ps‚Çë else ps‚Çë}) [] (ctxt.ps Œì)
      fvs = free-vars (erase t)
      e = list-any (stringset-contains fvs) ps‚Çë in
  if e then spanM-add (erased-marg-span Œì pi pi' T?) else spanMok

check-let Œì (ExDefTerm pi x (just T‚Çë) t) e? fm to =
  Œì ‚ä¢ T‚Çë ‚áê KdStar ‚Üù T‚Çë~ /
  Œì ‚ä¢ t ‚áê T‚Çë~ ‚Üù t~ /
  elim-pair (compileFail-in Œì t~) Œª tvs e ‚Üí
  [- Var-span (Œì , pi - x :` Tkt T‚Çë~) pi x checking (type-data Œì T‚Çë~ :: tvs) e -]
  return
    (ctxt-term-def pi localScope opacity-open x (just t~) T‚Çë~ Œì ,
     pi % x ,
     binder-data Œì pi x (Tkt T‚Çë~) e? (just t~) fm to ,
     (Œª {ed} T' ‚Üí [ Œì - t~ / (pi % x) ] T') ,
     (Œª t' ‚Üí LetTm (e? || ~ is-free-in (pi % x) (erase t')) x nothing t~
                   ([ Œì - Var x / (pi % x) ] t')))
check-let Œì (ExDefTerm pi x nothing t) e? fm to =
  Œì ‚ä¢ t ‚Üù t~ ‚áí T‚Çõ~ /
  elim-pair (compileFail-in Œì t~) Œª tvs e ‚Üí
  let Œì' = ctxt-term-def pi localScope opacity-open x (just t~) T‚Çõ~ Œì in
   [- Var-span Œì' pi x synthesizing (type-data Œì T‚Çõ~ :: tvs) e -]
   return
     (Œì' ,
     pi % x ,
     binder-data Œì pi x (Tkt T‚Çõ~) e? (just t~) fm to ,
     (Œª {ed} T' ‚Üí [ Œì - t~ / (pi % x) ] T') ,
     (Œª t' ‚Üí LetTm (e? || ~ is-free-in (pi % x) (erase t')) x nothing t~
                   ([ Œì - Var x / (pi % x) ] t')))
check-let Œì (ExDefType pi x k T) e? fm to =
  Œì ‚ä¢ k ‚Üù k~ /
  Œì ‚ä¢ T ‚áê k~ ‚Üù T~ /
  [- TpVar-span (Œì , pi - x :` Tkk k~) pi x checking [ kind-data Œì k~ ] nothing -]
  return
    (ctxt-type-def pi localScope opacity-open x (just T~) k~ Œì ,
     pi % x ,
     binder-data Œì pi x (Tkk k~) e? (just T~) fm to ,
     (Œª {ed} T' ‚Üí [ Œì - T~ / (pi % x) ] T') ,
     (Œª t' ‚Üí LetTp x k~ T~ ([ Œì - TpVar x / (pi % x) ] t')))

check-case Œì (ExCase pi x cas t) es D‚Çì cs œÅ‚Çí as dps T‚Çò cast-tm cast-tp =
  [- pattern-span pi x cas -]
  maybe-else'
    (trie-lookup (ctxt.qual Œì) x >>= uncurry Œª x' _ ‚Üí
     trie-lookup cs x' >>= Œª T ‚Üí
     just (x' , T))
    (let e = maybe-else' (trie-lookup es x)
               ("This is not a constructor of " ^
                  unqual-local (unqual-all (ctxt.qual Œì) D‚Çì))
               Œª _ ‚Üí "This case is unreachable" in
     [- pattern-ctr-span Œì pi x [] [] (just e) -]
     return2 (Case x [] (Hole pi) []) cs)
    Œª where
     (x' , T‚Çï , ps , is) ‚Üí
      decl-args Œì cas ps empty-trie œÅ‚Çí [] (const spanMok) >>= Œª where
        (Œì' , cas' , e , œÉ , œÅ , tvs , sm) ‚Üí
          let rs = tmtps-to-args' Œì' œÉ (drop dps is)
              T‚Çò' = TpAppTm (apps-type T‚Çò rs)
                            (app-caseArgs (cast-tm Œì') (cast-tp Œì') (recompose-apps as (Var x')) (zip cas cas'))
              T‚Çò' = hnf Œì' unfold-no-defs T‚Çò' in
          Œì' ‚ä¢ t ‚áê T‚Çò' ‚Üù t~ /
          sm t~ >>
          [- pattern-clause-span pi t (reverse tvs) -]
          [- pattern-ctr-span Œì' pi x cas' [] e -]
          return2 (Case x'
                     (subst-case-args cas' Œì œÅ‚Çí)
                     (subst-renamectxt Œì œÅ t~)
                     (args-to-tmtps (as ++ (subst-renamectxt Œì œÅ -arg_ <$> rs))))
                  (trie-remove cs x')
  where
  subst-case-args : case-args ‚Üí ctxt ‚Üí renamectxt ‚Üí case-args
  subst-case-args [] Œì œÅ = []
  subst-case-args (CaseArg e x tk? :: cs) Œì œÅ =
    CaseArg e x (subst-renamectxt Œì œÅ -tk_ <$> tk?) ::
      subst-case-args cs (ctxt-var-decl x Œì) (renamectxt-insert œÅ x x)

  free-in-term : var ‚Üí term ‚Üí err-m
  free-in-term x t = when (is-free-in x (erase t))
                       "Erased argument occurs free in the body of the term"
  tmtp-to-arg' : ctxt ‚Üí trie (Œ£i exprd ‚ü¶_‚üß) ‚Üí tmtp ‚Üí arg
  tmtp-to-arg' = Œª Œì œÉ ‚Üí either-else (Arg ‚àò substs Œì œÉ) (ArgTp ‚àò substs Œì œÉ)
  tmtps-to-args' : ctxt ‚Üí trie (Œ£i exprd ‚ü¶_‚üß) ‚Üí ùïÉ tmtp ‚Üí args
  tmtps-to-args' = Œª Œì œÉ ‚Üí tmtp-to-arg' Œì œÉ <$>_
  app-caseArgs : (term ‚Üí type ‚Üí term) ‚Üí (type ‚Üí kind ‚Üí type) ‚Üí term ‚Üí ùïÉ (ex-case-arg √ó case-arg) ‚Üí term
  app-caseArgs tf Tf = foldl Œª where
    (ExCaseArg _ pi x , CaseArg me _ tk?) t ‚Üí elim-pair (me , tk?) Œª where
      tt (just (Tkt T)) ‚Üí AppEr t (tf (Var (pi % x)) T)
      tt (just (Tkk k)) ‚Üí AppTp t (Tf (TpVar (pi % x)) k)
      ff (just (Tkt T)) ‚Üí App t (tf (Var (pi % x)) T)
      _ _ ‚Üí t
  spos = term-start-pos t
  epos = term-end-pos t
  add-case-arg : ‚àÄ {X Y} ‚Üí ctxt ‚Üí var ‚Üí var ‚Üí case-arg ‚Üí spanM (X √ó case-args √ó Y) ‚Üí spanM (X √ó case-args √ó Y)
  add-case-arg Œì x x‚Çô ca m = m >>=c Œª X ‚Üí return2 X ‚àò map-fst Œª cas ‚Üí ca :: subst-case-args cas Œì (renamectxt-single x x‚Çô)
  decl-args : ctxt ‚Üí ex-case-args ‚Üí params ‚Üí trie (Œ£i exprd ‚ü¶_‚üß) ‚Üí
                renamectxt ‚Üí ùïÉ tagged-val ‚Üí (term ‚Üí spanM ‚ä§) ‚Üí
              spanM (ctxt √ó case-args √ó err-m √ó trie (Œ£i exprd ‚ü¶_‚üß) √ó
                     renamectxt √ó ùïÉ tagged-val √ó (term ‚Üí spanM ‚ä§))
  decl-args Œì (ExCaseArg ExCaseArgTp pi x :: as) (Param me x' (Tkt T) :: ps) œÉ œÅ xs sm =
    let T' = substs Œì œÉ T
        Œì' = ctxt-var-decl-loc pi x Œì
        x‚Çô = if x =string ignored-var then x' else x in
    add-case-arg Œì' (pi % x) x‚Çô (CaseArg tt x‚Çô (just (Tkt T'))) $
    decl-args Œì' as ps
      (trie-insert œÉ x' (, TpVar (pi % x)))
      (renamectxt-insert œÅ (pi % x) x‚Çô)
      (binder-data Œì' pi x (Tkt T') Erased nothing spos epos :: xs)
      Œª t ‚Üí [- TpVar-span Œì' pi x checking [ expected-type Œì T' ]
                 (just ("This type argument should be a" ^
                     (if me then "n erased term" else " term"))) -] sm t
  decl-args Œì (ExCaseArg ExCaseArgTp pi x :: as) (Param _ x' (Tkk k) :: ps) œÉ œÅ xs sm =
    let k' = substs Œì œÉ k
        Œì' = ctxt-type-decl pi x k' Œì
        x‚Çô = if x =string ignored-var then x' else x in
    add-case-arg Œì' (pi % x) x‚Çô (CaseArg tt x‚Çô (just (Tkk k'))) $
    decl-args Œì' as ps
      (trie-insert œÉ x' (, TpVar (pi % x)))
      (renamectxt-insert œÅ (pi % x) x‚Çô)
      (binder-data Œì' pi x (Tkk k') Erased nothing spos epos :: xs)
      Œª t ‚Üí [- TpVar-span Œì' pi x checking [ kind-data Œì k' ] (free-in-term x t) -] sm t
  decl-args Œì (ExCaseArg me pi x :: as) (Param me' x' (Tkt T) :: ps) œÉ œÅ xs sm =
    let T' = substs Œì œÉ T
        e‚ÇÅ = when (ex-case-arg-erased me xor me') "Mismatched erasure of term argument"
        e‚ÇÇ = Œª t ‚Üí ifMaybe (ex-case-arg-erased me) $ free-in-term x t
        Œì' = Œì , pi - x :` (Tkt T')
        x‚Çô = if x =string ignored-var then x' else x in
    (add-case-arg Œì' (pi % x) x‚Çô (CaseArg me' x‚Çô (just (Tkt T'))) $
    decl-args Œì' as ps
      (trie-insert œÉ x' (, Var (pi % x)))
      (renamectxt-insert œÅ (pi % x) x‚Çô)
      (binder-data Œì' pi x (Tkt T') (ex-case-arg-erased me) nothing spos epos :: xs)
      Œª t ‚Üí [- Var-span Œì' pi x checking [ type-data Œì T' ] (e‚ÇÅ ||-maybe e‚ÇÇ t) -] sm t)
  decl-args Œì (ExCaseArg me pi x :: as) (Param me' x' (Tkk k) :: ps) œÉ œÅ xs sm =
    let k' = substs Œì œÉ k
        Œì' = ctxt-var-decl-loc pi x Œì
        x‚Çô = if x =string ignored-var then x' else x in
    add-case-arg Œì' (pi % x) x‚Çô (CaseArg tt x‚Çô (just (Tkk k'))) $
    decl-args Œì' as ps
      (trie-insert œÉ x' (, Var (pi % x)))
      (renamectxt-insert œÅ (pi % x) x‚Çô)
      (binder-data Œì' pi x (Tkk k') (ex-case-arg-erased me) nothing spos epos :: xs)
      Œª t ‚Üí [- Var-span Œì' pi x checking [ expected-kind Œì k' ]
                 (just "This term argument should be a type") -] sm t
  decl-args Œì [] [] œÉ œÅ xs sm =
    return (Œì , [] , nothing , œÉ , œÅ , xs , sm)
  decl-args Œì as [] œÉ œÅ xs sm =
    return (Œì , [] , just (‚Ñï-to-string (length as) ^ " too many arguments supplied") ,
              œÉ , œÅ , xs , sm)
  decl-args Œì [] ps œÉ œÅ xs sm =
    return (Œì , params-to-case-args (substs-params Œì œÉ ps) ,
            just (‚Ñï-to-string (length ps) ^ " more arguments expected") , œÉ , œÅ , xs , sm)

check-cases Œì ms D‚Çì cs œÅ as dps T‚Çò cast-tm cast-tp =
  foldr {B = stringset ‚Üí trie (type √ó params √ó ùïÉ tmtp) ‚Üí
              spanM (cases √ó trie (type √ó params √ó ùïÉ tmtp))}
    (Œª m x es cs' ‚Üí 
      check-case Œì m es D‚Çì cs' œÅ as dps T‚Çò cast-tm cast-tp >>=c Œª m~ cs ‚Üí
      x (stringset-insert es (ex-case-ctr m)) cs >>=c Œª ms~ ‚Üí 
      return2 (m~ :: ms~))
    (Œª es ‚Üí return2 [])
    ms
    empty-stringset
    (trie-map (decompose-ctr-type Œì) cs)
  >>=c Œª ms~ missing-cases ‚Üí
  let xs = map (map-snd snd) $ trie-mappings missing-cases
      csf = uncurry‚ÇÇ Œª T‚Çï ps as ‚Üí
              rope-to-string $ strRun Œì $
                strVar (unqual-all (ctxt.qual Œì) T‚Çï) >>str args-to-string (params-to-args ps)
      e = "Missing patterns: " ^ ùïÉ-to-string csf ", " xs in
  return2 ms~ (unless (iszero (length xs)) e)

check-refinement Œì T‚Çò k‚Çò s =
  check-type (qualified-ctxt Œì) (resugar T‚Çò) (just k‚Çò) empty-spans >>= uncurry Œª T‚Çò' s' ‚Üí
    return $ (Œª x ‚Üí x , s) $
      T‚Çò' ,
      [ to-string-tag "computed motive" Œì T‚Çò ] ,
      (when (spans-have-error s') "We could not compute a well-kinded motive")

get-datatype-info-from-head-type Œì X as = return $ maybe-else' (data-lookup Œì X as)
    (inj‚ÇÅ $ "The head type of the subterm is not a datatype" , [ head-type Œì (TpVar X) ])
    (Œª Œº ‚Üí inj‚ÇÇ Œº)

check-sigma-evidence Œì t‚Çë? X as = maybe-else' t‚Çë?
  (get-datatype-info-from-head-type Œì X as >>=s Œª d ‚Üí return $ inj‚ÇÇ (sigma-build-evidence X d , id , d))
  (Œª t‚Çë ‚Üí
    Œì ‚ä¢ t‚Çë ‚Üù t‚Çë~ ‚áí T /
    let ev-err = inj‚ÇÅ $
                   ("The synthesized type of the evidence does not prove " ^
                      unqual-local (unqual-all (ctxt.qual Œì) X) ^ " is a datatype") ,
                    [ to-string-tag "evidence type" Œì T ] in
    case decompose-tpapps (hnf Œì unfold-head-elab T) of Œª where
      (TpVar X' , as') ‚Üí case reverse as' of Œª where
        (Ttp T :: as') ‚Üí return $ if ~ conv-type Œì T (TpVar X)
          then ev-err
          else maybe-else
            ev-err
            (Œª {d@(mk-data-info X X‚Çí as‚Çö as·µ¢ mps k·µ¢ k cs cs‚Çö‚Çõ eds gds) ‚Üí
              inj‚ÇÇ (t‚Çë~ , (App $ recompose-apps (as‚Çö ++ tmtps-to-args Erased as·µ¢) $
                                   Var $ data-to/ X) , d)})
            -- AS: it looks like we are reversing as' twice, so not reversing at all? 
            (data-lookup-mu Œì X X' $ reverse as' ++ as)
            -- TODO: Make sure "X" isn't a _defined_ type, but a _declared_ one!
            --       This way we avoid the possibility that "as" has arguments
            --       to parameters in it, but only to indices.
            -- Also TODO: Make sure that parameters are equal in above conversion check!
        _ ‚Üí return ev-err
      _ ‚Üí return ev-err
  )

ctxt-mu-decls : ctxt ‚Üí term ‚Üí indices ‚Üí type ‚Üí datatype-info ‚Üí posinfo ‚Üí posinfo ‚Üí posinfo ‚Üí var ‚Üí (cases ‚Üí spanM ‚ä§) √ó ctxt √ó ùïÉ tagged-val √ó renamectxt √ó (ctxt ‚Üí term ‚Üí type ‚Üí term) √ó (ctxt ‚Üí type ‚Üí kind ‚Üí type)
ctxt-mu-decls Œì t is T‚Çò (mk-data-info X X‚Çí as‚Çö as·µ¢ ps k·µ¢ k cs cs‚Çö‚Çõ eds gds) pi‚ÇÅ pi‚ÇÇ pi‚ÇÉ x =
  let X' = mu-Type/ x
      x‚Çò·µ§ = mu-isType/ x
      qX‚Çò·µ§ = data-Is/ X
      qX‚Çú‚Çí = data-to/ X
      qX' = pi‚ÇÅ % X'
      qx‚Çò·µ§ = pi‚ÇÅ % x‚Çò·µ§
      qx = pi‚ÇÅ % x
      T‚Çò·µ§ = TpAppTp (flip apps-type as‚Çö $ TpVar qX‚Çò·µ§) $ TpVar qX'
      Œì' = ctxt-term-def pi‚ÇÅ localScope opacity-open x‚Çò·µ§ nothing T‚Çò·µ§ $
           ctxt-datatype-decl X qx as‚Çö $
           ctxt-type-decl pi‚ÇÅ X' k Œì
      fresh‚Çì = fresh-var (add-indices-to-ctxt is Œì') (maybe-else "x" id (is-var (Ttm t)))
      T‚Çì = hnf Œì' unfold-no-defs (indices-to-alls is $ TpAbs ff fresh‚Çì (Tkt $ indices-to-tpapps is $ TpVar qX') $ TpAppTm (indices-to-tpapps is T‚Çò) $ Phi (Beta (Var fresh‚Çì) (Var fresh‚Çì)) (App (indices-to-apps is $ AppEr (AppTp (flip apps-term as‚Çö $ Var qX‚Çú‚Çí) $ TpVar qX') $ Var qx‚Çò·µ§) $ Var fresh‚Çì) (Var fresh‚Çì))
      Œì'' = ctxt-term-decl pi‚ÇÅ x T‚Çì Œì'
      e‚ÇÇ? = unless (X =string X‚Çí) "Abstract datatypes can only be pattern matched by œÉ"
      e‚ÇÉ = Œª x ‚Üí just $ x ^ " occurs free in the erasure of the body (not allowed)"
      cs-fvs = stringset-contains ‚àò' free-vars-cases ‚àò' erase-cases
      e‚ÇÉ‚Çì? = Œª cs x ‚Üí ifMaybe (cs-fvs cs x) $ e‚ÇÉ x
      e‚ÇÉ? = Œª cs ‚Üí e‚ÇÉ‚Çì? cs (mu-isType/ x) ||-maybe e‚ÇÉ‚Çì? cs (mu-Type/ x) in
    (Œª cs ‚Üí [- var-span NotErased Œì'' pi‚ÇÅ x checking (Tkt T‚Çì) (e‚ÇÇ? ||-maybe e‚ÇÉ? cs) -] spanMok) ,
     Œì'' ,
    (binder-data Œì'' pi‚ÇÅ X' (Tkk k) Erased nothing pi‚ÇÇ pi‚ÇÉ ::
     binder-data Œì'' pi‚ÇÅ x‚Çò·µ§ (Tkt T‚Çò·µ§) Erased nothing pi‚ÇÇ pi‚ÇÉ ::
     binder-data Œì'' pi‚ÇÅ x (Tkt T‚Çì) NotErased nothing pi‚ÇÇ pi‚ÇÉ ::
     to-string-tag X' Œì'' k ::
     to-string-tag x‚Çò·µ§ Œì'' T‚Çò·µ§ ::
     to-string-tag x Œì'' T‚Çì :: []) ,
    renamectxt-insert* empty-renamectxt
      ((qX' , X') :: (qx‚Çò·µ§ , x‚Çò·µ§) :: (qx , x) :: []) ,
    let cg = qX' , recompose-tpapps (args-to-tmtps as‚Çö) (TpVar qx) , AppEr (AppTp (recompose-apps as‚Çö (Var qX‚Çú‚Çí)) (TpVar qX')) (Var qx‚Çò·µ§) in
    flip (mk-ctr-fmap-Œ∑? ff ‚àò ctxt-datatype-undef qX') cg ,
    flip (mk-ctr-fmap‚Çñ-Œ∑? ff ‚àò ctxt-datatype-undef qX') cg

check-mu Œì pi pi' x t T‚Çò? pi'' cs pi''' T‚Çë? =
  check-term Œì t nothing >>=c Œª t~ T ‚Üí
  let no-motive-err = just "A motive is required when synthesizing"
      no-motive = return (nothing , [] , no-motive-err) in
  case decompose-tpapps (hnf Œì unfold-head-elab T) of Œª where
    (TpVar X , as) ‚Üí
      get-datatype-info-from-head-type Œì X as on-fail
       (uncurry Œª e tvs ‚Üí spanM-add (Mu-span Œì pi pi''' nothing (maybe-to-checking T‚Çë?)
         (expected-type-if Œì T‚Çë? ++ tvs) $ just e) >>
        return-when {m = T‚Çë?} (Hole pi) (TpHole pi))
       >>=s Œª where
        (d @ (mk-data-info X‚Çí _ as‚Çö as·µ¢ ps k·µ¢ k cs' cs‚Çö‚Çõ eds gds)) ‚Üí
          let R‚Çì = mu-Type/ x; qR‚Çì = pi' % R‚Çì
              Œì‚Çò = data-highlight (ctxt-type-decl pi' R‚Çì k Œì) qR‚Çì
              œÅ‚Çò = subst Œì‚Çò (recompose-tpapps (args-to-tmtps as‚Çö) (TpVar X‚Çí)) qR‚Çì
              œÅ‚Çò' = subst Œì‚Çò (TpVar R‚Çì) qR‚Çì
              e‚Çò = Œª T‚Çò ‚Üí when (neg‚Çí (extract-pos (positivity.type+ qR‚Çì Œì‚Çò (hnf-ctr Œì‚Çò qR‚Çì T‚Çò))))
                            (R‚Çì ^ " occurs negatively in the motive")
          in
              maybe-map (Œª T‚Çò ‚Üí check-type Œì‚Çò T‚Çò (just k·µ¢)) T‚Çò? >>=? Œª T‚Çò?' ‚Üí
              let is = kind-to-indices Œì k·µ¢
                  e‚Çò = T‚Çò?' >>= e‚Çò
                  ret-tp = Œª ps as t ‚Üí maybe-else' T‚Çò?' T‚Çë? (Œª T‚Çò ‚Üí just $ hnf Œì unfold-head-elab (TpAppTm (apps-type (œÅ‚Çò T‚Çò) $
                              tmtps-to-args NotErased (drop (length ps) as)) t)) in
              (maybe-else' T‚Çò?'
                 (return T‚Çë? on-fail no-motive >>=m Œª T‚Çë ‚Üí
                  let T‚Çò = refine-motive Œì is (as·µ¢ ++ [ Ttm t~ ]) T‚Çë in
                  check-refinement Œì T‚Çò k·µ¢ >>=c Œª T‚Çò ‚Üí return2 (just T‚Çò))
                 Œª T‚Çò ‚Üí return (just T‚Çò , [] , nothing))
              >>=c Œª T‚Çò ‚Üí uncurry Œª tvs‚ÇÅ e‚ÇÅ ‚Üí
              let T‚Çò = maybe-else' T‚Çò (TpHole pi) id
                  is = drop-last 1 is
                  reduce-cs = map Œª {(Ctr x T) ‚Üí Ctr x $ hnf Œì unfold-no-defs T}
                  fcs = Œª y ‚Üí inst-ctrs Œì ps as‚Çö (map-snd (rename-var {TYPE} Œì X‚Çí y) <$> cs')
                  cs' = reduce-cs $ fcs (mu-Type/ (pi' % x)) in
              case
                (ctxt-mu-decls Œì t~ is T‚Çò d pi' pi'' pi''' x) of Œª where
                (sm , Œì' , bds , œÅ , cast-tm , cast-tp) ‚Üí
                  let cs'' = foldl (Œª {(Ctr x T) œÉ ‚Üí trie-insert œÉ x T}) empty-trie cs'
                      drop-ps = 0
                      scrutinee = t~
                      T·µ£ = ret-tp ps (args-to-tmtps as‚Çö ++ as·µ¢) scrutinee in
                  check-cases Œì' cs X‚Çí cs'' œÅ as‚Çö drop-ps T‚Çò cast-tm cast-tp >>=c Œª cs~ e‚ÇÇ ‚Üí
                  let e‚ÇÉ = maybe-else' T·µ£
                             (just "A motive is required when synthesizing")
                             (check-for-type-mismatch-if Œì "synthesized" T‚Çë?) in
                  [- Mu-span Œì pi pi''' T‚Çò?' (maybe-to-checking T‚Çë?)
                         (expected-type-if Œì T‚Çë? ++
                           maybe-else' T·µ£ [] (Œª T·µ£ ‚Üí [ type-data Œì T·µ£ ]) ++
                           tvs‚ÇÅ ++
                           bds)
                         (e‚ÇÅ ||-maybe (e‚ÇÇ ||-maybe (e‚ÇÉ ||-maybe e‚Çò))) -]
                  sm cs~ >>
                  return-when {m = T‚Çë?}
                    (subst-renamectxt Œì œÅ (Mu x t~ (just (œÅ‚Çò' T‚Çò)) d cs~))
                    (maybe-else' T·µ£ (TpHole pi) id)
    (T‚Çï , as) ‚Üí
      [- Mu-span Œì pi pi''' nothing (maybe-to-checking T‚Çë?)
        [ head-type Œì T‚Çï ] (just "The head type of the subterm is not a datatype") -]
      return-when {m = T‚Çë?} (Hole pi) (TpHole pi)

check-sigma Œì pi t? t T‚Çò? pi'' cs pi''' T‚Çë? = 
  check-term Œì t nothing >>=c Œª t~ T ‚Üí
  let no-motive-err = just "A motive is required when synthesizing"
      no-motive = return (nothing , [] , no-motive-err) in
  case decompose-tpapps (hnf Œì unfold-head-elab T) of Œª where
    (TpVar X , as) ‚Üí
      check-sigma-evidence Œì t? X as on-fail
       (uncurry Œª e tvs ‚Üí spanM-add (Sigma-span Œì pi pi''' nothing (maybe-to-checking T‚Çë?)
         (expected-type-if Œì T‚Çë? ++ tvs) $ just e) >>
        return-when {m = T‚Çë?} (Hole pi) (TpHole pi))
       >>=s Œª where
        (t‚Çë~ , cast , d @ (mk-data-info X‚Çí _ as‚Çö as·µ¢ ps k·µ¢ k cs' cs‚Çö‚Çõ eds gds)) ‚Üí
              maybe-map (Œª T‚Çò ‚Üí check-type Œì T‚Çò (just k·µ¢)) T‚Çò? >>=? Œª T‚Çò?' ‚Üí
              let is = kind-to-indices Œì k·µ¢
                  ret-tp = Œª ps as t ‚Üí maybe-else' T‚Çò?' T‚Çë? (Œª T‚Çò ‚Üí just $ hnf Œì unfold-head-elab (TpAppTm (apps-type T‚Çò $
                              tmtps-to-args NotErased (drop (length ps) as)) t)) in
              (maybe-else' T‚Çò?'
                 (return T‚Çë? on-fail no-motive >>=m Œª T‚Çë ‚Üí
                  let T‚Çò = refine-motive Œì is (as·µ¢ ++ [ Ttm t~ ]) T‚Çë in
                  check-refinement Œì T‚Çò k·µ¢ >>=c Œª T‚Çò ‚Üí return2 (just T‚Çò))
                 Œª T‚Çò ‚Üí return (just T‚Çò , [] , nothing))
              >>=c Œª T‚Çò ‚Üí uncurry Œª tvs‚ÇÅ e‚ÇÅ ‚Üí
              let T‚Çò = maybe-else' T‚Çò (TpHole pi) id
                  reduce-cs = map Œª {(Ctr x T) ‚Üí Ctr x $ hnf Œì unfold-no-defs T}
                  fcs = Œª y ‚Üí inst-ctrs Œì ps as‚Çö (map-snd (rename-var {TYPE} Œì X‚Çí y) <$> cs')
                  cs' = reduce-cs $ if X‚Çí =string X then cs‚Çö‚Çõ else fcs X in
              let sm = const spanMok
                  œÅ = empty-renamectxt
                  cast-tm = (Œª Œì t T ‚Üí t)
                  cast-tp = (Œª Œì T k ‚Üí T) 
                  cs'' = foldl (Œª {(Ctr x T) œÉ ‚Üí trie-insert œÉ x T}) empty-trie cs'
                  drop-ps = maybe-else 0 length (when (X‚Çí =string X) ps)
                  scrutinee = cast t~
                  T·µ£ = ret-tp ps (args-to-tmtps as‚Çö ++ as·µ¢) scrutinee in
                 check-cases Œì cs X‚Çí cs'' œÅ as‚Çö drop-ps T‚Çò cast-tm cast-tp >>=c Œª cs~ e‚ÇÇ ‚Üí
                 let e‚ÇÉ = maybe-else' T·µ£
                             (just "A motive is required when synthesizing")
                             (check-for-type-mismatch-if Œì "synthesized" T‚Çë?) in
                  [- Sigma-span Œì pi pi''' T‚Çò?' (maybe-to-checking T‚Çë?)
                         (expected-type-if Œì T‚Çë? ++
                           maybe-else' T·µ£ [] (Œª T·µ£ ‚Üí [ type-data Œì T·µ£ ]) ++
                           tvs‚ÇÅ)
                         (e‚ÇÅ ||-maybe (e‚ÇÇ ||-maybe e‚ÇÉ)) -]
                  sm cs~ >>
                  return-when {m = T‚Çë?}
                    (subst-renamectxt Œì œÅ (Sigma (just t‚Çë~) t~ (just T‚Çò) d cs~))
                    (maybe-else' T·µ£ (TpHole pi) id)
    (T‚Çï , as) ‚Üí
      [- Sigma-span Œì pi pi''' nothing (maybe-to-checking T‚Çë?)
        [ head-type Œì T‚Çï ] (just "The head type of the subterm is not a datatype") -]
      return-when {m = T‚Çë?} (Hole pi) (TpHole pi)


